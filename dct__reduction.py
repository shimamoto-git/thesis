# -*- coding: utf-8 -*-
"""dct_ reduction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cbmKBIj0_rlnsR4xZhCXxuMcc7xX9Vlr
"""

import cv2
import numpy as np
import time

def create_custom_left_matrix(m, scale_factor):
    # m x m 行列を作成し、すべての要素を0で初期化
    custom_matrix = np.zeros((int(scale_factor*m), m))

    # m x m の単位行列を挿入
    custom_matrix[:int(scale_factor*m), :int(scale_factor*m)] = (scale_factor+(1-scale_factor)/2)*np.eye(int(scale_factor*m))

    return np.float32(custom_matrix)  # データ型を変換

def create_custom_right_matrix(n, scale_factor):
    # m x scale_factor*m 行列を作成し、すべての要素を0で初期化
    custom_matrix = np.zeros((n, int(scale_factor * n)))

    # m x m の単位行列を挿入
    custom_matrix[:int(scale_factor * n), :int(scale_factor * n)] = (scale_factor+(1-scale_factor)/2)*np.eye(int(scale_factor * n))

    return np.float32(custom_matrix)  # データ型を変換

def dct_reduction(dct_image, scale_factor):
    left_matrix = create_custom_left_matrix(dct_image.shape[0], scale_factor)
    right_matrix = create_custom_right_matrix(dct_image.shape[1], scale_factor)

    # 行列の掛け算
    result_image = np.dot(np.dot(left_matrix, dct_image), right_matrix)
    print(result_image)
    return result_image

# 画像読み込み
image_path = 'kit.jpg'
original_image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
print(original_image.shape)

# DCT変換
dct_image1 = cv2.dct(np.float32(original_image))
dct_image2 = dct_image1

# 縮小倍率
scale_factor = 0.125

#提案手法
start = time.time()
result_image1_dct = dct_reduction(dct_image1, scale_factor)
end = time.time()
print("Proposed method")
print(end - start)
result_image1_idct = cv2.idct(result_image1_dct)
print(result_image1_idct)
#デバッグ
print(result_image1_idct.shape)

#従来手法(IDCT->縮小->DCT)
start = time.time()
result_image2_idct = cv2.idct(dct_image2)
print(result_image2_idct.shape)
enlarged_image = cv2.resize(result_image2_idct, None, fx=scale_factor, fy=scale_factor)
result_image2_dct = cv2.dct(np.float32(enlarged_image))
print(result_image2_dct.shape)
end = time.time()
print("Conventional method")
print(end - start)

# 結果を出力
cv2.imwrite('ResultImage_rec.jpg', result_image1_idct)